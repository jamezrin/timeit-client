# based on https://github.com/jurplel/install-qt-action/blob/master/.github/workflows/test.yml

name: Build and Deploy

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  windows-build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-2019]
    steps:
      - uses: actions/checkout@v2
      - name: Cache Qt
        id: cache-qt
        uses: actions/cache@v1
        with:
          path: ../Qt
          key: ${{ matrix.os }}-QtCache
      - name: Install Qt with options
        uses: jurplel/install-qt-action@v2
        with:
          version: 5.15.1
          tools: 'tools_ifw,4.0,qt.tools.ifw.40 tools_openssl,1.1.1,qt.tools.openssl'
          cached: ${{ steps.cache-qt.outputs.cache-hit }}
      - name: Install necessary Chocolatey packages
        run: |
          choco install jom -y --no-progress
          choco install openssl -y --no-progress
        shell: cmd
      - uses: actions/cache@v2
        with:
          path: C:\Users\runneradmin\AppData\Local\Temp\chocolatey
          key: ${{ runner.os }}-chocolatey-${{ matrix.os }}-${{ hashFiles('**/lockfiles') }}
          restore-keys: |
            ${{ runner.os }}-chocolatey-${{ matrix.os }}-
            ${{ runner.os }}-chocolatey-
      - name: Make project and build installer
        run: |
          echo "Building project..."
          call "%programfiles(x86)%\\Microsoft Visual Studio\\2019\\Enterprise\\VC\\Auxiliary\\Build\\vcvars64.bat"
          qmake "CONFIG+=release"
          jom

          echo "Deploying binary dependencies..."
          set TIB_RELEASE_BUILD=%cd%\release\timeit-client.exe
          set TIB_DEPLOY_DIR=%cd%\deploy\windows
          set TIB_PKG_DATA_DIR=%TIB_DEPLOY_DIR%\packages\name.jamezrin.timeit-client\data
          set TIB_INSTALLER_FILE=TimeIt_setup.exe
          copy "%TIB_RELEASE_BUILD%" "%TIB_PKG_DATA_DIR%"
          windeployqt --release --qmldir . "%TIB_PKG_DATA_DIR%\timeit-client.exe"

          echo "Adding OpenSSL DLLs..."
          set OPENSSL_BIN_DIR=%ProgramFiles%\OpenSSL-Win64\bin
          copy "%OPENSSL_BIN_DIR%\libcrypto-1_1-x64.dll" "%TIB_PKG_DATA_DIR%"
          copy "%OPENSSL_BIN_DIR%\libssl-1_1-x64.dll" "%TIB_PKG_DATA_DIR%"

          echo "Building installer..."
          dir "%TIB_PKG_DATA_DIR%"
          set PATH=%PATH%;%RUNNER_WORKSPACE%\Qt\Tools\QtInstallerFramework\4.0\bin
          binarycreator -c "%TIB_DEPLOY_DIR%\config\config.xml" -p "%TIB_DEPLOY_DIR%\packages" %TIB_INSTALLER_FILE%
        shell: cmd
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: Windows Build (installer)
          path: TimeIt_setup.exe
  ubuntu-build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
    steps:
      - uses: actions/checkout@v2
      - name: Install Qt with options
        uses: jurplel/install-qt-action@v2
        with:
          version: 5.15.1
          tools: 'tools_ifw,4.0,qt.tools.ifw.40'
          cached: ${{ steps.cache-qt.outputs.cache-hit }}
      - name: Install necessary APT packages
        run: |
          ls -la ..
          sudo apt install -y libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-render-util0 libxcb-xinerama0
        shell: bash
      - name: Make project
        run: |
          qmake CONFIG+=release
          make
        shell: bash
      - name: Prepare linuxdeploy
        run: |
          wget https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage -O linuxdeploy-x86_64.AppImage -nv
          wget https://github.com/linuxdeploy/linuxdeploy-plugin-qt/releases/download/continuous/linuxdeploy-plugin-qt-x86_64.AppImage -O linuxdeploy-plugin-qt-x86_64.AppImage -nv
          chmod +x linuxdeploy-x86_64.AppImage linuxdeploy-plugin-qt-x86_64.AppImage
          ./linuxdeploy-x86_64.AppImage --list-plugins
        shell: bash
      - name: Build AppImage
        run: |
          export QML_SOURCES_PATHS=$PWD
          ./linuxdeploy-x86_64.AppImage \
            --plugin qt \
            --appdir build \
            --executable timeit-client \
            --desktop-file deploy/linux/timeit-client.desktop \
            --icon-file deploy/linux/icons/256/timeit-client.png \
            --icon-file deploy/linux/icons/128/timeit-client.png \
            --icon-file deploy/linux/icons/64/timeit-client.png \
            --output appimage
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: Linux Build
          path: TimeIt*.AppImage
